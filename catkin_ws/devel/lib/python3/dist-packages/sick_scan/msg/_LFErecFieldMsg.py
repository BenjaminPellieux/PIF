# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_scan/LFErecFieldMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LFErecFieldMsg(genpy.Message):
  _md5sum = "268600f47eb96b8f384e54c8bc6e18f6"
  _type = "sick_scan/LFErecFieldMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message contains a single field of a "sSN LFErec" message of a Sick laser scanner as an ros message.
# See https://github.com/SICKAG/libsick_ldmrs/blob/master/src/sopas/LdmrsSopasLayer.cpp lines 1414 ff.
# Field result field_result_mrs is 0 (invalid/incorrect), 1 (free/clear) or 2 (infringed)
# Note: field indices are sorted in reverse order, i.e. with 2 configured fields, we typically have
# output_msg.fields[0].field_index = 1, output_msg.fields[0].field_result_mrs = 0 (invalid)
# output_msg.fields[1].field_index = 2, output_msg.fields[1].field_result_mrs = 1 or 2 (clear=1 or infringed=2)
# output_msg.fields[2].field_index = 3, output_msg.fields[2].field_result_mrs = 1 or 2 (clear=1 or infringed=2)

uint16 version_number
uint8 field_index
uint32 sys_count
float32 dist_scale_factor
float32 dist_scale_offset
uint32 angle_scale_factor
int32 angle_scale_offset
uint8 field_result_mrs # field result is 0 (invalid/incorrect), 1 (free/clear) or 2 (infringed)
# Time block
uint16 time_state  # No time data: 0, Time data: 1
uint16 year        # f.e. 2021
uint8 month        # 1 ... 12
uint8 day          # 1 ... 31
uint8 hour         # 0 ... 23
uint8 minute       # 0 ... 59
uint8 second       # 0 ... 59
uint32 microsecond # 0 ... 999999
"""
  __slots__ = ['version_number','field_index','sys_count','dist_scale_factor','dist_scale_offset','angle_scale_factor','angle_scale_offset','field_result_mrs','time_state','year','month','day','hour','minute','second','microsecond']
  _slot_types = ['uint16','uint8','uint32','float32','float32','uint32','int32','uint8','uint16','uint16','uint8','uint8','uint8','uint8','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       version_number,field_index,sys_count,dist_scale_factor,dist_scale_offset,angle_scale_factor,angle_scale_offset,field_result_mrs,time_state,year,month,day,hour,minute,second,microsecond

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LFErecFieldMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.version_number is None:
        self.version_number = 0
      if self.field_index is None:
        self.field_index = 0
      if self.sys_count is None:
        self.sys_count = 0
      if self.dist_scale_factor is None:
        self.dist_scale_factor = 0.
      if self.dist_scale_offset is None:
        self.dist_scale_offset = 0.
      if self.angle_scale_factor is None:
        self.angle_scale_factor = 0
      if self.angle_scale_offset is None:
        self.angle_scale_offset = 0
      if self.field_result_mrs is None:
        self.field_result_mrs = 0
      if self.time_state is None:
        self.time_state = 0
      if self.year is None:
        self.year = 0
      if self.month is None:
        self.month = 0
      if self.day is None:
        self.day = 0
      if self.hour is None:
        self.hour = 0
      if self.minute is None:
        self.minute = 0
      if self.second is None:
        self.second = 0
      if self.microsecond is None:
        self.microsecond = 0
    else:
      self.version_number = 0
      self.field_index = 0
      self.sys_count = 0
      self.dist_scale_factor = 0.
      self.dist_scale_offset = 0.
      self.angle_scale_factor = 0
      self.angle_scale_offset = 0
      self.field_result_mrs = 0
      self.time_state = 0
      self.year = 0
      self.month = 0
      self.day = 0
      self.hour = 0
      self.minute = 0
      self.second = 0
      self.microsecond = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HBI2fIiB2H5BI().pack(_x.version_number, _x.field_index, _x.sys_count, _x.dist_scale_factor, _x.dist_scale_offset, _x.angle_scale_factor, _x.angle_scale_offset, _x.field_result_mrs, _x.time_state, _x.year, _x.month, _x.day, _x.hour, _x.minute, _x.second, _x.microsecond))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.version_number, _x.field_index, _x.sys_count, _x.dist_scale_factor, _x.dist_scale_offset, _x.angle_scale_factor, _x.angle_scale_offset, _x.field_result_mrs, _x.time_state, _x.year, _x.month, _x.day, _x.hour, _x.minute, _x.second, _x.microsecond,) = _get_struct_HBI2fIiB2H5BI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HBI2fIiB2H5BI().pack(_x.version_number, _x.field_index, _x.sys_count, _x.dist_scale_factor, _x.dist_scale_offset, _x.angle_scale_factor, _x.angle_scale_offset, _x.field_result_mrs, _x.time_state, _x.year, _x.month, _x.day, _x.hour, _x.minute, _x.second, _x.microsecond))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.version_number, _x.field_index, _x.sys_count, _x.dist_scale_factor, _x.dist_scale_offset, _x.angle_scale_factor, _x.angle_scale_offset, _x.field_result_mrs, _x.time_state, _x.year, _x.month, _x.day, _x.hour, _x.minute, _x.second, _x.microsecond,) = _get_struct_HBI2fIiB2H5BI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HBI2fIiB2H5BI = None
def _get_struct_HBI2fIiB2H5BI():
    global _struct_HBI2fIiB2H5BI
    if _struct_HBI2fIiB2H5BI is None:
        _struct_HBI2fIiB2H5BI = struct.Struct("<HBI2fIiB2H5BI")
    return _struct_HBI2fIiB2H5BI
