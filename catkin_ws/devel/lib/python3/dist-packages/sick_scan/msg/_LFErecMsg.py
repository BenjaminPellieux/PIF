# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_scan/LFErecMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sick_scan.msg
import std_msgs.msg

class LFErecMsg(genpy.Message):
  _md5sum = "41b1ad74a61b1c63ee0183843d182e5b"
  _type = "sick_scan/LFErecMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message contains a single field of a "sSN LFErec" message of a Sick laser scanner as an ros message.
# See https://github.com/SICKAG/libsick_ldmrs/blob/master/src/sopas/LdmrsSopasLayer.cpp lines 1414 ff.
# Field result field_result_mrs is 0 (invalid/incorrect), 1 (free/clear) or 2 (infringed)
# Note: field indices are sorted in reverse order, i.e. with 2 configured fields, we typically have
# output_msg.fields[0].field_index = 1, output_msg.fields[0].field_result_mrs = 0 (invalid)
# output_msg.fields[1].field_index = 2, output_msg.fields[1].field_result_mrs = 1 or 2 (clear=1 or infringed=2)
# output_msg.fields[2].field_index = 3, output_msg.fields[2].field_result_mrs = 1 or 2 (clear=1 or infringed=2)

Header header

uint16 fields_number # number of fields
sick_scan/LFErecFieldMsg[] fields # 3 fields for TiM871S

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sick_scan/LFErecFieldMsg
# This message contains a single field of a "sSN LFErec" message of a Sick laser scanner as an ros message.
# See https://github.com/SICKAG/libsick_ldmrs/blob/master/src/sopas/LdmrsSopasLayer.cpp lines 1414 ff.
# Field result field_result_mrs is 0 (invalid/incorrect), 1 (free/clear) or 2 (infringed)
# Note: field indices are sorted in reverse order, i.e. with 2 configured fields, we typically have
# output_msg.fields[0].field_index = 1, output_msg.fields[0].field_result_mrs = 0 (invalid)
# output_msg.fields[1].field_index = 2, output_msg.fields[1].field_result_mrs = 1 or 2 (clear=1 or infringed=2)
# output_msg.fields[2].field_index = 3, output_msg.fields[2].field_result_mrs = 1 or 2 (clear=1 or infringed=2)

uint16 version_number
uint8 field_index
uint32 sys_count
float32 dist_scale_factor
float32 dist_scale_offset
uint32 angle_scale_factor
int32 angle_scale_offset
uint8 field_result_mrs # field result is 0 (invalid/incorrect), 1 (free/clear) or 2 (infringed)
# Time block
uint16 time_state  # No time data: 0, Time data: 1
uint16 year        # f.e. 2021
uint8 month        # 1 ... 12
uint8 day          # 1 ... 31
uint8 hour         # 0 ... 23
uint8 minute       # 0 ... 59
uint8 second       # 0 ... 59
uint32 microsecond # 0 ... 999999
"""
  __slots__ = ['header','fields_number','fields']
  _slot_types = ['std_msgs/Header','uint16','sick_scan/LFErecFieldMsg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fields_number,fields

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LFErecMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fields_number is None:
        self.fields_number = 0
      if self.fields is None:
        self.fields = []
    else:
      self.header = std_msgs.msg.Header()
      self.fields_number = 0
      self.fields = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields_number
      buff.write(_get_struct_H().pack(_x))
      length = len(self.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.fields:
        _x = val1
        buff.write(_get_struct_HBI2fIiB2H5BI().pack(_x.version_number, _x.field_index, _x.sys_count, _x.dist_scale_factor, _x.dist_scale_offset, _x.angle_scale_factor, _x.angle_scale_offset, _x.field_result_mrs, _x.time_state, _x.year, _x.month, _x.day, _x.hour, _x.minute, _x.second, _x.microsecond))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fields is None:
        self.fields = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 2
      (self.fields_number,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fields = []
      for i in range(0, length):
        val1 = sick_scan.msg.LFErecFieldMsg()
        _x = val1
        start = end
        end += 37
        (_x.version_number, _x.field_index, _x.sys_count, _x.dist_scale_factor, _x.dist_scale_offset, _x.angle_scale_factor, _x.angle_scale_offset, _x.field_result_mrs, _x.time_state, _x.year, _x.month, _x.day, _x.hour, _x.minute, _x.second, _x.microsecond,) = _get_struct_HBI2fIiB2H5BI().unpack(str[start:end])
        self.fields.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields_number
      buff.write(_get_struct_H().pack(_x))
      length = len(self.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.fields:
        _x = val1
        buff.write(_get_struct_HBI2fIiB2H5BI().pack(_x.version_number, _x.field_index, _x.sys_count, _x.dist_scale_factor, _x.dist_scale_offset, _x.angle_scale_factor, _x.angle_scale_offset, _x.field_result_mrs, _x.time_state, _x.year, _x.month, _x.day, _x.hour, _x.minute, _x.second, _x.microsecond))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fields is None:
        self.fields = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 2
      (self.fields_number,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fields = []
      for i in range(0, length):
        val1 = sick_scan.msg.LFErecFieldMsg()
        _x = val1
        start = end
        end += 37
        (_x.version_number, _x.field_index, _x.sys_count, _x.dist_scale_factor, _x.dist_scale_offset, _x.angle_scale_factor, _x.angle_scale_offset, _x.field_result_mrs, _x.time_state, _x.year, _x.month, _x.day, _x.hour, _x.minute, _x.second, _x.microsecond,) = _get_struct_HBI2fIiB2H5BI().unpack(str[start:end])
        self.fields.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_HBI2fIiB2H5BI = None
def _get_struct_HBI2fIiB2H5BI():
    global _struct_HBI2fIiB2H5BI
    if _struct_HBI2fIiB2H5BI is None:
        _struct_HBI2fIiB2H5BI = struct.Struct("<HBI2fIiB2H5BI")
    return _struct_HBI2fIiB2H5BI
