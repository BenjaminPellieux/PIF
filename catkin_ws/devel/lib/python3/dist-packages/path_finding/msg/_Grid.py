# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_finding/Grid.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Grid(genpy.Message):
  _md5sum = "8477af00e98f03fd36c0b55bb90bc58b"
  _type = "path_finding/Grid"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point[4] sub_area
bool done
bool unreachable

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['sub_area','done','unreachable']
  _slot_types = ['geometry_msgs/Point[4]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sub_area,done,unreachable

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Grid, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sub_area is None:
        self.sub_area = [geometry_msgs.msg.Point() for _ in range(4)]
      if self.done is None:
        self.done = False
      if self.unreachable is None:
        self.unreachable = False
    else:
      self.sub_area = [geometry_msgs.msg.Point() for _ in range(4)]
      self.done = False
      self.unreachable = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      if len(self.sub_area) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.sub_area), 'self.sub_area')))
      for val1 in self.sub_area:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2B().pack(_x.done, _x.unreachable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sub_area is None:
        self.sub_area = None
      end = 0
      self.sub_area = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.sub_area.append(val1)
      _x = self
      start = end
      end += 2
      (_x.done, _x.unreachable,) = _get_struct_2B().unpack(str[start:end])
      self.done = bool(self.done)
      self.unreachable = bool(self.unreachable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      if len(self.sub_area) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.sub_area), 'self.sub_area')))
      for val1 in self.sub_area:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2B().pack(_x.done, _x.unreachable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sub_area is None:
        self.sub_area = None
      end = 0
      self.sub_area = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.sub_area.append(val1)
      _x = self
      start = end
      end += 2
      (_x.done, _x.unreachable,) = _get_struct_2B().unpack(str[start:end])
      self.done = bool(self.done)
      self.unreachable = bool(self.unreachable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
