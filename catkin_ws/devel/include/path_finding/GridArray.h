// Generated by gencpp from file path_finding/GridArray.msg
// DO NOT EDIT!


#ifndef PATH_FINDING_MESSAGE_GRIDARRAY_H
#define PATH_FINDING_MESSAGE_GRIDARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_finding/Grid.h>

namespace path_finding
{
template <class ContainerAllocator>
struct GridArray_
{
  typedef GridArray_<ContainerAllocator> Type;

  GridArray_()
    : grid()  {
    }
  GridArray_(const ContainerAllocator& _alloc)
    : grid(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::path_finding::Grid_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::path_finding::Grid_<ContainerAllocator> >> _grid_type;
  _grid_type grid;





  typedef boost::shared_ptr< ::path_finding::GridArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_finding::GridArray_<ContainerAllocator> const> ConstPtr;

}; // struct GridArray_

typedef ::path_finding::GridArray_<std::allocator<void> > GridArray;

typedef boost::shared_ptr< ::path_finding::GridArray > GridArrayPtr;
typedef boost::shared_ptr< ::path_finding::GridArray const> GridArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_finding::GridArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_finding::GridArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_finding::GridArray_<ContainerAllocator1> & lhs, const ::path_finding::GridArray_<ContainerAllocator2> & rhs)
{
  return lhs.grid == rhs.grid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_finding::GridArray_<ContainerAllocator1> & lhs, const ::path_finding::GridArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_finding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_finding::GridArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_finding::GridArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_finding::GridArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_finding::GridArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_finding::GridArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_finding::GridArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_finding::GridArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3dc66829f5cad491c9d9128ab16fff09";
  }

  static const char* value(const ::path_finding::GridArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3dc66829f5cad491ULL;
  static const uint64_t static_value2 = 0xc9d9128ab16fff09ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_finding::GridArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_finding/GridArray";
  }

  static const char* value(const ::path_finding::GridArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_finding::GridArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_finding/Grid[] grid\n"
"================================================================================\n"
"MSG: path_finding/Grid\n"
"geometry_msgs/Point[4] sub_area\n"
"bool done\n"
"bool unreachable\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::path_finding::GridArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_finding::GridArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GridArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_finding::GridArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_finding::GridArray_<ContainerAllocator>& v)
  {
    s << indent << "grid[]" << std::endl;
    for (size_t i = 0; i < v.grid.size(); ++i)
    {
      s << indent << "  grid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_finding::Grid_<ContainerAllocator> >::stream(s, indent + "    ", v.grid[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_FINDING_MESSAGE_GRIDARRAY_H
